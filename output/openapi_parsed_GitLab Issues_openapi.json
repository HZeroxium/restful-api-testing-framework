{
  "result": {
    "title": "GitLab Issues API",
    "version": "1.0.0",
    "description": "This is a simple API for test"
  },
  "metadata": null,
  "title": "GitLab Issues API",
  "version": "1.0.0",
  "description": "This is a simple API for test",
  "endpoints": [
    {
      "name": "projects_get",
      "description": "Get a list of all visible projects across GitLab for the authenticated user. When accessed without authentication, only public projects with simple fields are returned.",
      "path": "/projects",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "error": "6 validation errors for Schema\nenum.0\n  Input should be a valid string [type=string_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.1\n  Input should be a valid string [type=string_type, input_value=10, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.2\n  Input should be a valid string [type=string_type, input_value=20, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.3\n  Input should be a valid string [type=string_type, input_value=30, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.4\n  Input should be a valid string [type=string_type, input_value=40, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.5\n  Input should be a valid string [type=string_type, input_value=50, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type"
      },
      "output_schema": {}
    },
    {
      "name": "projects_post",
      "description": "Creates a new project owned by the authenticated user.",
      "path": "/projects",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "allow_merge_on_skipped_pipeline": {
            "description": "Set whether or not merge requests can be merged with skipped jobs.",
            "type": "BOOLEAN"
          },
          "auto_cancel_pending_pipelines": {
            "description": "Auto-cancel pending pipelines. This isn\u2019t a boolean, but enabled/disabled.",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "STRING"
          },
          "auto_devops_deploy_strategy": {
            "description": "Auto Deploy strategy",
            "enum": [
              "continuous",
              "manual",
              "timed_incremental"
            ],
            "type": "STRING"
          },
          "auto_devops_enabled": {
            "description": "Enable Auto DevOps for this project.",
            "type": "BOOLEAN"
          },
          "autoclose_referenced_issues": {
            "description": "Set whether auto-closing referenced issues on default branch.",
            "type": "BOOLEAN"
          },
          "avatar": {
            "description": "Image file for avatar of the project.",
            "type": "STRING"
          },
          "build_coverage_regex": {
            "description": "Test coverage parsing.",
            "type": "STRING"
          },
          "build_git_strategy": {
            "description": "The Git strategy. Defaults to fetch.",
            "type": "STRING"
          },
          "build_timeout": {
            "description": "The maximum amount of time in minutes that a job is able run (in seconds).",
            "type": "INTEGER"
          },
          "builds_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "ci_config_path": {
            "description": "The path to CI configuration file.",
            "type": "STRING"
          },
          "container_registry_enabled": {
            "description": "Enable container registry for this project.",
            "type": "BOOLEAN"
          },
          "default_branch": {
            "description": "master by default.",
            "type": "STRING"
          },
          "description": {
            "description": "Short project description.",
            "type": "STRING"
          },
          "emails_disabled": {
            "description": "Disable email notifications.",
            "type": "BOOLEAN"
          },
          "forking_access_level": {
            "description": "One of disabled,private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "import_url": {
            "description": "URL to import repository from. Either import_url or template_name is required, not both",
            "type": "STRING"
          },
          "initialize_with_readme": {
            "description": "false by default.",
            "type": "BOOLEAN"
          },
          "issues_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "issues_enabled": {
            "description": "(Deprecated)Enable issues for this project. Use issues_access_level instead.",
            "type": "BOOLEAN"
          },
          "jobs_enabled": {
            "description": "(Deprecated)Enable jobs for this project. Use builds_access_level instead.",
            "type": "BOOLEAN"
          },
          "lfs_enabled": {
            "description": "Enable LFS.",
            "type": "BOOLEAN"
          },
          "merge_method": {
            "description": "Set the merge method used.",
            "enum": [
              "merge",
              "rebase_merge",
              "ff"
            ],
            "type": "STRING"
          },
          "merge_requests_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "merge_requests_enabled": {
            "description": "(Deprecated)Enable merge requests for this project. Use merge_requests_access_level instead.",
            "type": "BOOLEAN"
          },
          "name": {
            "description": "The name of the new project. Either path or name is required, not both.",
            "type": "STRING"
          },
          "namespace_id": {
            "description": "Namespace for the new project (defaults to the current user's namespace).",
            "type": "INTEGER"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "description": "Set whether merge requests can only be merged when all the discussions are resolved.",
            "type": "BOOLEAN"
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "description": "Set whether merge requests can only be merged with successful jobs.",
            "type": "BOOLEAN"
          },
          "packages_enabled": {
            "description": "Enable or disable packages repository feature.",
            "type": "BOOLEAN"
          },
          "pages_access_level": {
            "description": "One of disabled, private,enabled, or public.",
            "enum": [
              "disabled",
              "private",
              "enabled",
              "public"
            ],
            "type": "STRING"
          },
          "requirements_access_level": {
            "description": "One of disabled,private,enabled or public",
            "enum": [
              "disabled",
              "private",
              "enabled",
              "public"
            ],
            "type": "STRING"
          },
          "path": {
            "description": "Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes).",
            "type": "STRING"
          },
          "printing_merge_request_link_enabled": {
            "description": "Show link to create/view merge request when pushing from the command line.",
            "type": "BOOLEAN"
          },
          "public_builds": {
            "description": "If true, jobs can be viewed by non-project members.",
            "type": "BOOLEAN"
          },
          "remove_source_branch_after_merge": {
            "description": "Enable Delete source branch option by default for all new merge requests.",
            "type": "BOOLEAN"
          },
          "repository_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "repository_storage": {
            "description": "Which storage shard the repository is on.(admins only)",
            "type": "STRING"
          },
          "request_access_enabled": {
            "description": "Allow users to request member access.",
            "type": "BOOLEAN"
          },
          "resolve_outdated_diff_discussions": {
            "description": "Automatically resolve merge request diffs discussions on lines changed with a push.",
            "type": "BOOLEAN"
          },
          "shared_runners_enabled": {
            "description": "Enable shared runners for this project.",
            "type": "BOOLEAN"
          },
          "show_default_award_emojis": {
            "description": "Show default award emojis.",
            "type": "BOOLEAN"
          },
          "snippets_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "snippets_enabled": {
            "description": "(Deprecated)Enable snippets for this project. Use snippets_access_level instead.",
            "type": "BOOLEAN"
          },
          "tag_list": {
            "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project.",
            "items": {
              "type": "STRING"
            },
            "type": "ARRAY"
          },
          "template_name": {
            "description": "When used withoutuse_custom_template, name of abuilt-in project template. When used withuse_custom_template, name of a custom project template.",
            "type": "STRING"
          },
          "visibility": {
            "description": "See project visibility level.",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "STRING"
          },
          "wiki_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "wiki_enabled": {
            "description": "(Deprecated)Enable wiki for this project. Use wiki_access_levelinstead.",
            "type": "BOOLEAN"
          },
          "cadence": {
            "type": "STRING"
          },
          "enabled": {
            "type": "BOOLEAN"
          },
          "keep_n": {
            "type": "INTEGER"
          },
          "older_than": {
            "type": "STRING"
          },
          "name_regex": {
            "type": "STRING"
          },
          "name_regex_delete": {
            "type": "STRING"
          },
          "name_regex_keep": {
            "type": "STRING"
          },
          "next_run_at": {
            "type": "STRING"
          }
        },
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "issues_get",
      "description": "Get all issues the authenticated user has access to. By default it returns only issues created by the current user. To get all issues, use parameter scope=all.",
      "path": "/issues",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "page": {
            "description": "Page number",
            "type": "INTEGER"
          },
          "per_page": {
            "description": "Number of items to list per page",
            "maximum": 100.0,
            "type": "INTEGER"
          },
          "assignee_id": {
            "description": "Return issues assigned to the given user id . Mutually exclusive with assignee_username . None returns unassigned issues. Any returns issues with an assignee. ( Introduced in GitLab 9.5)",
            "type": "INTEGER"
          },
          "assignee_username": {
            "description": "Return issues assigned to the given username . Either assignee_username or assignee_id is required, not both. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.",
            "items": {
              "type": "STRING"
            },
            "type": "ARRAY"
          },
          "author_id": {
            "description": "Return issues created by the given user id . Either author_id or author_username is required, not both. Combine with scope=all or scope=assigned_to_me . ( Introduced in GitLab 9.5)",
            "type": "INTEGER"
          },
          "author_username": {
            "description": "Return issues created by the given username . Similar to author_id and mutually exclusive with author_id .",
            "type": "STRING"
          },
          "confidential": {
            "description": "Filter confidential or public issues.",
            "type": "BOOLEAN"
          },
          "created_after": {
            "description": "Return issues created on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "created_before": {
            "description": "Return issues created on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "due_date": {
            "description": "Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",
            "enum": [
              "0",
              "overdue",
              "week",
              "month",
              "next_month_and_previous_two_weeks"
            ],
            "type": "STRING"
          },
          "iids": {
            "description": "Return only the issues having the given iid",
            "items": {
              "type": "INTEGER"
            },
            "type": "ARRAY"
          },
          "param_in": {
            "description": "Modify the scope of the search attribute. title , description , or a string joining them with comma. Default is title,description",
            "enum": [
              "title",
              "description",
              "title,description"
            ],
            "type": "STRING"
          },
          "milestone": {
            "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.",
            "enum": [
              "None",
              "Any"
            ],
            "type": "STRING"
          },
          "labels": {
            "description": "Comma-separated list of label names, issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.",
            "enum": [
              "None",
              "Any",
              "No+Label"
            ],
            "type": "STRING"
          },
          "my_reaction_emoji": {
            "description": "Return issues reacted by the authenticated user by the given emoji . None returns issues not given a reaction. Any returns issues given at least one reaction. ( Introduced in GitLab 10.0)",
            "enum": [
              "None",
              "Any"
            ],
            "type": "STRING"
          },
          "non_archived": {
            "description": "Return issues only from non-archived projects. If false , the response returns issues from both archived and non-archived projects. Default is true . (Introduced in GitLab 13.0 )",
            "type": "BOOLEAN"
          },
          "order_by": {
            "description": "Return issues ordered by created_at , updated_at , priority , due_date , relative_position , label_priority , milestone_due , popularity , weight fields. Default is created_at",
            "enum": [
              "created_at",
              "updated_at",
              "priority",
              "due_date",
              "relative_position",
              "label_priority",
              "milestone_due",
              "popularity"
            ],
            "type": "STRING"
          },
          "scope": {
            "description": "Return issues for the given scope: created_by_me , assigned_to_me or all . Defaults to created_by_me For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. ( Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)",
            "enum": [
              "created_by_me",
              "assigned_to_me",
              "all"
            ],
            "type": "STRING"
          },
          "search": {
            "description": "Search issues against their title and description",
            "type": "STRING"
          },
          "sort": {
            "description": "Return issues sorted in asc or desc order. Default is desc",
            "enum": [
              "asc",
              "desc"
            ],
            "type": "STRING"
          },
          "state": {
            "description": "Return all issues or just those that are opened or closed",
            "enum": [
              "all",
              "opened",
              "closed"
            ],
            "type": "STRING"
          },
          "updated_after": {
            "description": "Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "updated_before": {
            "description": "Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "with_labels_details": {
            "description": "If true , the response returns more details for each label in labels field: :name , :color , :description , :description_html , :text_color . Default is false . The description_html attribute was introduced in GitLab 12.7",
            "type": "BOOLEAN"
          },
          "labels_0": {
            "type": "STRING"
          },
          "milestone_0": {
            "type": "STRING"
          },
          "author_id_0": {
            "type": "INTEGER"
          },
          "author_username_0": {
            "type": "STRING"
          },
          "assignee_id_0": {
            "type": "INTEGER"
          },
          "assignee_username_0": {
            "type": "STRING"
          },
          "my_reaction_emoji_0": {
            "type": "STRING"
          }
        },
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "issues_id_get",
      "description": "Only for administrators. Get a single issue.",
      "path": "/issues/{id}",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID of the issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "groups_get",
      "description": "Get a list of visible groups for the authenticated user. When accessed without authentication, only public groups are returned.",
      "path": "/groups",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "error": "6 validation errors for Schema\nenum.0\n  Input should be a valid string [type=string_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.1\n  Input should be a valid string [type=string_type, input_value=10, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.2\n  Input should be a valid string [type=string_type, input_value=20, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.3\n  Input should be a valid string [type=string_type, input_value=30, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.4\n  Input should be a valid string [type=string_type, input_value=40, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.5\n  Input should be a valid string [type=string_type, input_value=50, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type"
      },
      "output_schema": {}
    },
    {
      "name": "groups_post",
      "description": "Creates a new project group. Available only for users who can create groups.",
      "path": "/groups",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "error": "3 validation errors for Schema\nenum.0\n  Input should be a valid string [type=string_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.1\n  Input should be a valid string [type=string_type, input_value=1, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.2\n  Input should be a valid string [type=string_type, input_value=2, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type"
      },
      "output_schema": {}
    },
    {
      "name": "groups_id_issues_get",
      "description": "Get a list of a group\u2019s issues.",
      "path": "/groups/{id}/issues",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "page": {
            "description": "Page number",
            "type": "INTEGER"
          },
          "per_page": {
            "description": "Number of items to list per page",
            "maximum": 100.0,
            "type": "INTEGER"
          },
          "assignee_id": {
            "description": "Return issues assigned to the given user id . Mutually exclusive with assignee_username . None returns unassigned issues. Any returns issues with an assignee. ( Introduced in GitLab 9.5)",
            "type": "INTEGER"
          },
          "assignee_username": {
            "description": "Return issues assigned to the given username . Either assignee_username or assignee_id is required, not both.. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.",
            "items": {
              "type": "STRING"
            },
            "type": "ARRAY"
          },
          "author_id": {
            "description": "Return issues created by the given user id . Mutually exclusive with author_username . Combine with scope=all or scope=assigned_to_me . ( Introduced in GitLab 9.5)",
            "type": "INTEGER"
          },
          "author_username": {
            "description": "Return issues created by the given username . Either author_username or author_id is required, not both.",
            "type": "STRING"
          },
          "confidential": {
            "description": "Filter confidential or public issues.",
            "type": "BOOLEAN"
          },
          "created_after": {
            "description": "Return issues created on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "created_before": {
            "description": "Return issues created on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "due_date": {
            "description": "Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",
            "enum": [
              "0",
              "overdue",
              "week",
              "month",
              "next_month_and_previous_two_weeks"
            ],
            "type": "STRING"
          },
          "id": {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "type": "INTEGER"
          },
          "iids": {
            "description": "Return only the issues having the given iid",
            "items": {
              "type": "INTEGER"
            },
            "type": "ARRAY"
          },
          "labels": {
            "description": "Comma-separated list of label names, issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.",
            "enum": [
              "None",
              "Any",
              "No+Label"
            ],
            "type": "STRING"
          },
          "milestone": {
            "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.",
            "enum": [
              "None",
              "Any"
            ],
            "type": "STRING"
          },
          "my_reaction_emoji": {
            "description": "Return issues reacted by the authenticated user by the given emoji . None returns issues not given a reaction. Any returns issues given at least one reaction. ( Introduced in GitLab 10.0)",
            "enum": [
              "None",
              "Any"
            ],
            "type": "STRING"
          },
          "non_archived": {
            "description": "Return issues from non archived projects. Default is true. (Introduced in GitLab 12.8 )",
            "type": "BOOLEAN"
          },
          "order_by": {
            "description": "Return issues ordered by created_at , updated_at , priority , due_date , relative_position , label_priority , milestone_due , popularity , weight fields. Default is created_at",
            "enum": [
              "created_at",
              "updated_at",
              "priority",
              "due_date",
              "relative_position",
              "label_priority",
              "milestone_due",
              "popularity"
            ],
            "type": "STRING"
          },
          "scope": {
            "description": "Return issues for the given scope: created_by_me , assigned_to_me or all . For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. ( Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)",
            "enum": [
              "created_by_me",
              "assigned_to_me",
              "all"
            ],
            "type": "STRING"
          },
          "search": {
            "description": "Search group issues against their title and description",
            "type": "STRING"
          },
          "sort": {
            "description": "Return issues sorted in asc or desc order. Default is desc",
            "enum": [
              "asc",
              "desc"
            ],
            "type": "STRING"
          },
          "state": {
            "description": "Return all issues or just those that are opened or closed",
            "enum": [
              "opened",
              "closed"
            ],
            "type": "STRING"
          },
          "updated_after": {
            "description": "Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "updated_before": {
            "description": "Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "with_labels_details": {
            "description": "If true , the response returns more details for each label in labels field: :name , :color , :description , :description_html , :text_color . Default is false . The description_html attribute was introduced in GitLab 12.7",
            "type": "BOOLEAN"
          },
          "labels_0": {
            "type": "STRING"
          },
          "milestone_0": {
            "type": "STRING"
          },
          "author_id_0": {
            "type": "INTEGER"
          },
          "author_username_0": {
            "type": "STRING"
          },
          "assignee_id_0": {
            "type": "INTEGER"
          },
          "assignee_username_0": {
            "type": "STRING"
          },
          "my_reaction_emoji_0": {
            "type": "STRING"
          },
          "search_0": {
            "enum": [
              "title",
              "description",
              "title,description"
            ],
            "type": "STRING"
          },
          "param_in": {
            "type": "STRING"
          }
        },
        "required": [
          "id"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_get",
      "description": "Get a list of a project\u2019s issues.",
      "path": "/projects/{id}/issues",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "page": {
            "description": "Page number",
            "type": "INTEGER"
          },
          "per_page": {
            "description": "Number of items to list per page",
            "maximum": 100.0,
            "type": "INTEGER"
          },
          "assignee_id": {
            "description": "Return issues assigned to the given user id . Mutually exclusive with assignee_username . None returns unassigned issues. Any returns issues with an assignee. ( Introduced in GitLab 9.5)",
            "type": "INTEGER"
          },
          "assignee_username": {
            "description": "Return issues assigned to the given username . Either assignee_id or assignee_username is required, not both. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.",
            "items": {
              "type": "STRING"
            },
            "type": "ARRAY"
          },
          "author_id": {
            "description": "Return issues created by the given user id . Mutually exclusive with author_username . Combine with scope=all or scope=assigned_to_me . ( Introduced in GitLab 9.5)",
            "type": "INTEGER"
          },
          "author_username": {
            "description": "Return issues created by the given username . Either author_id or author_username is required, not both.",
            "type": "STRING"
          },
          "confidential": {
            "description": "Filter confidential or public issues.",
            "type": "BOOLEAN"
          },
          "created_after": {
            "description": "Return issues created on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "created_before": {
            "description": "Return issues created on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "due_date": {
            "description": "Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",
            "enum": [
              "0",
              "overdue",
              "week",
              "month",
              "next_month_and_previous_two_weeks"
            ],
            "type": "STRING"
          },
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user user",
            "type": "INTEGER"
          },
          "iids": {
            "description": "Return only the issues having the given iid",
            "items": {
              "type": "INTEGER"
            },
            "type": "ARRAY"
          },
          "labels": {
            "description": "Comma-separated list of label names, issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.",
            "enum": [
              "None",
              "Any",
              "No+Label"
            ],
            "type": "STRING"
          },
          "milestone": {
            "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.",
            "enum": [
              "None",
              "Any"
            ],
            "type": "STRING"
          },
          "my_reaction_emoji": {
            "description": "Return issues reacted by the authenticated user by the given emoji . None returns issues not given a reaction. Any returns issues given at least one reaction. ( Introduced in GitLab 10.0)",
            "enum": [
              "None",
              "Any"
            ],
            "type": "STRING"
          },
          "order_by": {
            "description": "Return issues ordered by created_at , updated_at , priority , due_date , relative_position , label_priority , milestone_due , popularity , weight fields. Default is created_at",
            "enum": [
              "created_at",
              "updated_at",
              "priority",
              "due_date",
              "relative_position",
              "label_priority",
              "milestone_due",
              "popularity"
            ],
            "type": "STRING"
          },
          "scope": {
            "description": "Return issues for the given scope: created_by_me , assigned_to_me or all . For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. ( Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)",
            "enum": [
              "created_by_me",
              "assigned_to_me",
              "all"
            ],
            "type": "STRING"
          },
          "search": {
            "description": "Search group issues against their title and description",
            "type": "STRING"
          },
          "sort": {
            "description": "Return issues sorted in asc or desc order. Default is desc",
            "enum": [
              "asc",
              "desc"
            ],
            "type": "STRING"
          },
          "state": {
            "description": "Return all issues or just those that are opened or closed",
            "enum": [
              "opened",
              "closed"
            ],
            "type": "STRING"
          },
          "updated_after": {
            "description": "Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "updated_before": {
            "description": "Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z )",
            "type": "STRING"
          },
          "with_labels_details": {
            "description": "If true , the response returns more details for each label in labels field: :name , :color , :description , :description_html , :text_color . Default is false . The description_html attribute was introduced in GitLab 12.7",
            "type": "BOOLEAN"
          },
          "labels_0": {
            "type": "STRING"
          },
          "milestone_0": {
            "type": "STRING"
          },
          "author_id_0": {
            "type": "INTEGER"
          },
          "author_username_0": {
            "type": "STRING"
          },
          "assignee_id_0": {
            "type": "INTEGER"
          },
          "assignee_username_0": {
            "type": "STRING"
          },
          "my_reaction_emoji_0": {
            "type": "STRING"
          },
          "search_0": {
            "enum": [
              "title",
              "description",
              "title,description"
            ],
            "type": "STRING"
          },
          "param_in": {
            "type": "STRING"
          }
        },
        "required": [
          "id"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_post",
      "description": "Creates a new project issue.",
      "path": "/projects/{id}/issues",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "assignee_ids": {
            "description": "The ID of the user(s) to assign the issue to.",
            "items": {
              "type": "INTEGER"
            },
            "type": "ARRAY"
          },
          "confidential": {
            "description": "Set an issue to be confidential. Default is false .",
            "type": "BOOLEAN"
          },
          "created_at": {
            "description": "When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z . Requires administrator or project/group owner rights.",
            "type": "STRING"
          },
          "description": {
            "description": "The description of an issue. Limited to 1,048,576 characters.",
            "type": "STRING"
          },
          "discussion_to_resolve": {
            "description": "The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of .",
            "type": "STRING"
          },
          "due_date": {
            "description": "The due date. Date time string in the format YYYY-MM-DD , for example 2016-03-11",
            "type": "STRING"
          },
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "iid": {
            "description": "The internal ID of the project's issue (requires administratoror project owner rights)",
            "type": "INTEGER"
          },
          "labels": {
            "description": "Comma-separated label names for an issue",
            "type": "STRING"
          },
          "merge_request_to_resolve_discussions_of": {
            "description": "The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.",
            "type": "INTEGER"
          },
          "milestone_id": {
            "description": "The global ID of a milestone to assign issue",
            "type": "INTEGER"
          },
          "title": {
            "description": "The title of an issue",
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "title"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_get",
      "description": "Get a single project issue.",
      "path": "/projects/{id}/issues/{issue_iid}",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of a project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_put",
      "description": "Updates an existing project issue. This call is also used to mark an issue as closed.",
      "path": "/projects/{id}/issues/{issue_iid}",
      "method": "PUT",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "add_labels": {
            "description": "Comma-separated label names to add to an issue.",
            "type": "STRING"
          },
          "assignee_ids": {
            "description": "The ID of the user(s) to assign the issue to. Set to 0 or provide an empty value to unassign all assignees.",
            "items": {
              "type": "INTEGER"
            },
            "type": "ARRAY"
          },
          "confidential": {
            "description": "Updates an issue to be confidential. At least one of the following parameters is required for the request to be successful: assignee_id, assignee_ids, confidential, created_at, description, discussion_locked, due_date, labels, milestone_id, state_event, title",
            "type": "BOOLEAN"
          },
          "description": {
            "description": "The description of an issue. Limited to 1,048,576 characters.",
            "type": "STRING"
          },
          "discussion_locked": {
            "description": "Flag indicating if the issue's discussion is locked. If the discussion is locked only project members can add or edit comments.",
            "type": "BOOLEAN"
          },
          "due_date": {
            "description": "The due date. Date time string in the format YYYY-MM-DD , for example 2016-03-11",
            "type": "STRING"
          },
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of a project's issue",
            "type": "INTEGER"
          },
          "labels": {
            "description": "Comma-separated label names for an issue. Set to an empty string to unassign all labels.",
            "type": "STRING"
          },
          "milestone_id": {
            "description": "The global ID of a milestone to assign the issue to. Set to 0 or provide an empty value to unassign a milestone.",
            "type": "INTEGER"
          },
          "remove_labels": {
            "description": "Comma-separated label names to remove from an issue.",
            "type": "STRING"
          },
          "state_event": {
            "description": "The state event of an issue. Set close to close the issue and reopen to reopen it",
            "enum": [
              "close",
              "reopen"
            ],
            "type": "STRING"
          },
          "title": {
            "description": "The title of an issue",
            "type": "STRING"
          },
          "updated_at": {
            "description": "When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z (requires administrator or project owner rights). Empty string or null values are not accepted.",
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_delete",
      "description": "Only for administrators and project owners. Deletes an issue.",
      "path": "/projects/{id}/issues/{issue_iid}",
      "method": "DELETE",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of a project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_reorder_put",
      "description": "Reorders an issue, you can see the results when sorting issues manually",
      "path": "/projects/{id}/issues/{issue_iid}/reorder",
      "method": "PUT",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          },
          "move_after_id": {
            "description": "The ID of a project\u2019s issue that should be placed after this issue, If move_after_id is not present, move_before_id is required",
            "type": "INTEGER"
          },
          "move_before_id": {
            "description": "The ID of a project\u2019s issue that should be placed before this issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_move_post",
      "description": "Moves an issue to a different project.",
      "path": "/projects/{id}/issues/{issue_iid}/move",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          },
          "to_project_id": {
            "description": "The ID of the new project",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid",
          "to_project_id"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_subscribe_post",
      "description": "Subscribes the authenticated user to an issue to receive notifications.",
      "path": "/projects/{id}/issues/{issue_iid}/subscribe",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_unsubscribe_post",
      "description": "Unsubscribes the authenticated user from the issue to not receive notifications from it",
      "path": "/projects/{id}/issues/{issue_iid}/unsubscribe",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_todo_post",
      "description": "Manually creates a to-do item for the current user on an issue.",
      "path": "/projects/{id}/issues/{issue_iid}/todo",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_time_estimate_post",
      "description": "Sets an estimated time of work for this issue.",
      "path": "/projects/{id}/issues/{issue_iid}/time_estimate",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          },
          "duration": {
            "description": "The duration in human format. e.g: 3h30m",
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "issue_iid",
          "duration"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_reset_time_estimate_post",
      "description": "Resets the estimated time for this issue to 0 seconds.",
      "path": "/projects/{id}/issues/{issue_iid}/reset_time_estimate",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_add_spent_time_post",
      "description": "Adds spent time for this issue",
      "path": "/projects/{id}/issues/{issue_iid}/add_spent_time",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          },
          "duration": {
            "description": "The duration in human format. e.g: 3h30m",
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "issue_iid",
          "duration"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_reset_spent_time_post",
      "description": "Resets the total spent time for this issue to 0 seconds.",
      "path": "/projects/{id}/issues/{issue_iid}/reset_spent_time",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_time_stats_get",
      "description": "If the project is private or the issue is confidential, you need to provide credentials to authorize. The preferred way to do this, is by using personal access tokens.",
      "path": "/projects/{id}/issues/{issue_iid}/time_stats",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_related_merge_requests_get",
      "description": "Get all the merge requests that are related to the issue.",
      "path": "/projects/{id}/issues/{issue_iid}/related_merge_requests",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_closed_by_get",
      "description": "Get all merge requests that close a particular issue when merged.",
      "path": "/projects/{id}/issues/{issue_iid}/closed_by",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_participants_get",
      "description": "Participants on issues",
      "path": "/projects/{id}/issues/{issue_iid}/participants",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of the project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_metric_images_get",
      "description": "List metric image",
      "path": "/projects/{id}/issues/{issue_iid}/metric_images",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of a project's issue",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_issues_issue_iid_metric_images_post",
      "description": "Upload metric image",
      "path": "/projects/{id}/issues/{issue_iid}/metric_images",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "INTEGER"
          },
          "issue_iid": {
            "description": "The internal ID of a project's issue",
            "type": "INTEGER"
          },
          "url": {
            "description": "The URL to view more metric information",
            "type": "STRING"
          },
          "": {
            "properties": {
              "file": {
                "description": "The image file to be uploaded",
                "type": "STRING"
              }
            },
            "required": [
              "file"
            ],
            "type": "OBJECT"
          }
        },
        "required": [
          "id",
          "issue_iid"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    }
  ],
  "endpoint_count": 27,
  "servers": [
    "http://localhost:30000/api/v4"
  ]
}