{
  "result": {
    "title": "GitLab Commit API",
    "version": "1.0.0",
    "description": "This is a simple API for test"
  },
  "metadata": null,
  "title": "GitLab Commit API",
  "version": "1.0.0",
  "description": "This is a simple API for test",
  "endpoints": [
    {
      "name": "projects_get",
      "description": "Get a list of all visible projects across GitLab for the authenticated user. When accessed without authentication, only public projects with simple fields are returned.",
      "path": "/projects",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "error": "6 validation errors for Schema\nenum.0\n  Input should be a valid string [type=string_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.1\n  Input should be a valid string [type=string_type, input_value=10, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.2\n  Input should be a valid string [type=string_type, input_value=20, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.3\n  Input should be a valid string [type=string_type, input_value=30, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.4\n  Input should be a valid string [type=string_type, input_value=40, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nenum.5\n  Input should be a valid string [type=string_type, input_value=50, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type"
      },
      "output_schema": {}
    },
    {
      "name": "projects_post",
      "description": "Creates a new project owned by the authenticated user.",
      "path": "/projects",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "allow_merge_on_skipped_pipeline": {
            "description": "Set whether or not merge requests can be merged with skipped jobs.",
            "type": "BOOLEAN"
          },
          "auto_cancel_pending_pipelines": {
            "description": "Auto-cancel pending pipelines. This isn\u2019t a boolean, but enabled/disabled.",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "STRING"
          },
          "auto_devops_deploy_strategy": {
            "description": "Auto Deploy strategy",
            "enum": [
              "continuous",
              "manual",
              "timed_incremental"
            ],
            "type": "STRING"
          },
          "auto_devops_enabled": {
            "description": "Enable Auto DevOps for this project.",
            "type": "BOOLEAN"
          },
          "autoclose_referenced_issues": {
            "description": "Set whether auto-closing referenced issues on default branch.",
            "type": "BOOLEAN"
          },
          "avatar": {
            "description": "Image file for avatar of the project.",
            "type": "STRING"
          },
          "build_coverage_regex": {
            "description": "Test coverage parsing.",
            "type": "STRING"
          },
          "build_git_strategy": {
            "description": "The Git strategy. Defaults to fetch.",
            "type": "STRING"
          },
          "build_timeout": {
            "description": "The maximum amount of time in minutes that a job is able run (in seconds).",
            "type": "INTEGER"
          },
          "builds_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "ci_config_path": {
            "description": "The path to CI configuration file.",
            "type": "STRING"
          },
          "container_registry_enabled": {
            "description": "Enable container registry for this project.",
            "type": "BOOLEAN"
          },
          "default_branch": {
            "description": "master by default.",
            "type": "STRING"
          },
          "description": {
            "description": "Short project description.",
            "type": "STRING"
          },
          "emails_disabled": {
            "description": "Disable email notifications.",
            "type": "BOOLEAN"
          },
          "forking_access_level": {
            "description": "One of disabled,private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "import_url": {
            "description": "URL to import repository from. Either import_url or template_name is required, not both",
            "type": "STRING"
          },
          "initialize_with_readme": {
            "description": "false by default.",
            "type": "BOOLEAN"
          },
          "issues_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "issues_enabled": {
            "description": "(Deprecated)Enable issues for this project. Use issues_access_level instead.",
            "type": "BOOLEAN"
          },
          "jobs_enabled": {
            "description": "(Deprecated)Enable jobs for this project. Use builds_access_level instead.",
            "type": "BOOLEAN"
          },
          "lfs_enabled": {
            "description": "Enable LFS.",
            "type": "BOOLEAN"
          },
          "merge_method": {
            "description": "Set the merge method used.",
            "enum": [
              "merge",
              "rebase_merge",
              "ff"
            ],
            "type": "STRING"
          },
          "merge_requests_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "merge_requests_enabled": {
            "description": "(Deprecated)Enable merge requests for this project. Use merge_requests_access_level instead.",
            "type": "BOOLEAN"
          },
          "name": {
            "description": "The name of the new project. Either path or name is required, not both.",
            "type": "STRING"
          },
          "namespace_id": {
            "description": "Namespace for the new project (defaults to the current user's namespace).",
            "type": "INTEGER"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "description": "Set whether merge requests can only be merged when all the discussions are resolved.",
            "type": "BOOLEAN"
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "description": "Set whether merge requests can only be merged with successful jobs.",
            "type": "BOOLEAN"
          },
          "packages_enabled": {
            "description": "Enable or disable packages repository feature.",
            "type": "BOOLEAN"
          },
          "pages_access_level": {
            "description": "One of disabled, private,enabled, or public.",
            "enum": [
              "disabled",
              "private",
              "enabled",
              "public"
            ],
            "type": "STRING"
          },
          "requirements_access_level": {
            "description": "One of disabled,private,enabled or public",
            "enum": [
              "disabled",
              "private",
              "enabled",
              "public"
            ],
            "type": "STRING"
          },
          "path": {
            "description": "Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes).",
            "type": "STRING"
          },
          "printing_merge_request_link_enabled": {
            "description": "Show link to create/view merge request when pushing from the command line.",
            "type": "BOOLEAN"
          },
          "public_builds": {
            "description": "If true, jobs can be viewed by non-project members.",
            "type": "BOOLEAN"
          },
          "remove_source_branch_after_merge": {
            "description": "Enable Delete source branch option by default for all new merge requests.",
            "type": "BOOLEAN"
          },
          "repository_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "repository_storage": {
            "description": "Which storage shard the repository is on.(admins only)",
            "type": "STRING"
          },
          "request_access_enabled": {
            "description": "Allow users to request member access.",
            "type": "BOOLEAN"
          },
          "resolve_outdated_diff_discussions": {
            "description": "Automatically resolve merge request diffs discussions on lines changed with a push.",
            "type": "BOOLEAN"
          },
          "shared_runners_enabled": {
            "description": "Enable shared runners for this project.",
            "type": "BOOLEAN"
          },
          "show_default_award_emojis": {
            "description": "Show default award emojis.",
            "type": "BOOLEAN"
          },
          "snippets_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "snippets_enabled": {
            "description": "(Deprecated)Enable snippets for this project. Use snippets_access_level instead.",
            "type": "BOOLEAN"
          },
          "tag_list": {
            "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project.",
            "items": {
              "type": "STRING"
            },
            "type": "ARRAY"
          },
          "template_name": {
            "description": "When used withoutuse_custom_template, name of abuilt-in project template. When used withuse_custom_template, name of a custom project template.",
            "type": "STRING"
          },
          "visibility": {
            "description": "See project visibility level.",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "STRING"
          },
          "wiki_access_level": {
            "description": "One of disabled, private, or enabled.",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "STRING"
          },
          "wiki_enabled": {
            "description": "(Deprecated)Enable wiki for this project. Use wiki_access_levelinstead.",
            "type": "BOOLEAN"
          },
          "cadence": {
            "type": "STRING"
          },
          "enabled": {
            "type": "BOOLEAN"
          },
          "keep_n": {
            "type": "INTEGER"
          },
          "older_than": {
            "type": "STRING"
          },
          "name_regex": {
            "type": "STRING"
          },
          "name_regex_delete": {
            "type": "STRING"
          },
          "name_regex_keep": {
            "type": "STRING"
          },
          "next_run_at": {
            "type": "STRING"
          }
        },
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_get",
      "description": "Get a list of repository commits in a project",
      "path": "/projects/{id}/repository/commits",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "ref_name": {
            "description": "The name of a repository branch, tag or revision range, or if not given the default branch",
            "type": "STRING"
          },
          "since": {
            "description": "Only commits after or on this date will be returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ",
            "type": "STRING"
          },
          "until": {
            "description": "Only commits before or on this date will be returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ",
            "type": "STRING"
          },
          "path": {
            "description": "The file path",
            "type": "STRING"
          },
          "all": {
            "description": "Retrieve every commit from the repository",
            "type": "BOOLEAN"
          },
          "with_stats": {
            "description": "Stats about each commit will be added to the response",
            "type": "BOOLEAN"
          },
          "first_parent": {
            "description": "Follow only the first parent commit upon seeing a merge commit",
            "type": "BOOLEAN"
          },
          "order": {
            "description": "List commits in order",
            "enum": [
              "default",
              "topo"
            ],
            "type": "STRING"
          }
        },
        "required": [
          "id"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_post",
      "description": "Create a commit by posting a JSON payload",
      "path": "/projects/{id}/repository/commits",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "branch": {
            "description": "Name of the branch to commit into. To create a new branch, also provide either start_branch or start_sha, and optionally start_project",
            "type": "STRING"
          },
          "commit_message": {
            "description": "Commit message",
            "type": "STRING"
          },
          "start_branch": {
            "description": "Name of the branch to start the new branch from",
            "type": "STRING"
          },
          "start_sha": {
            "description": "SHA of the commit to start the new branch from",
            "type": "STRING"
          },
          "start_project": {
            "description": "The project ID or URL-encoded path of the project to start the new branch from. Defaults to the value of id.",
            "type": "STRING"
          },
          "author_email": {
            "description": "Author email for commit",
            "type": "STRING"
          },
          "author_name": {
            "description": "Author name for commit",
            "type": "STRING"
          },
          "stats": {
            "description": "Include commit stats",
            "type": "BOOLEAN"
          },
          "force": {
            "description": "When true overwrites the target branch with a new commit based on the start_branch or start_sha",
            "type": "BOOLEAN"
          },
          "array": {
            "items": {
              "example": {
                "type": "OBJECT"
              },
              "properties": {
                "action": {
                  "description": "The action to perform",
                  "enum": [
                    "create",
                    "delete",
                    "move",
                    "update",
                    "chmod"
                  ],
                  "type": "STRING"
                },
                "file_path": {
                  "description": "The full path to the file",
                  "type": "STRING"
                },
                "previous_path": {
                  "description": "The original full path to the file being moved",
                  "type": "STRING"
                },
                "content": {
                  "description": "The file content, required for all except `delete` and optional for `move`",
                  "type": "STRING"
                },
                "encoding": {
                  "description": "The file encoding",
                  "enum": [
                    "base64",
                    "text"
                  ],
                  "type": "STRING"
                },
                "last_commit_id": {
                  "description": "Last known file commit ID. Will be only considered in update, move, and delete actions.",
                  "type": "STRING"
                },
                "execute_filemode": {
                  "description": "When true/false enables/disables the execute flag on the file. Only considered for chmod action.",
                  "type": "BOOLEAN"
                }
              },
              "required": [
                "action",
                "file_path"
              ],
              "type": "OBJECT"
            },
            "type": "ARRAY"
          }
        },
        "required": [
          "id",
          "branch",
          "commit_message"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_get",
      "description": "Get a specific commit identified by the commit hash or name of a branch or tag.",
      "path": "/projects/{id}/repository/commits/{sha}",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit hash or name of a repository branch or tag",
            "type": "STRING"
          },
          "stats": {
            "description": "Include commit stats",
            "type": "BOOLEAN"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_refs_get",
      "description": "Get all references (from branches or tags) a commit is pushed to. The pagination parameters page and per_page can be used to restrict the list of references.",
      "path": "/projects/{id}/repository/commits/{sha}/refs",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit hash or name of a repository branch or tag",
            "type": "STRING"
          },
          "type": {
            "description": "The scope of commits",
            "enum": [
              "branch",
              "tag",
              "all"
            ],
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_cherry_pick_post",
      "description": "Cherry picks a commit to a given branch.",
      "path": "/projects/{id}/repository/commits/{sha}/cherry_pick",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit hash",
            "type": "STRING"
          },
          "dry_run": {
            "description": "Does not commit any changes",
            "type": "BOOLEAN"
          },
          "": {
            "properties": {
              "branch": {
                "description": "The name of the branch",
                "type": "STRING"
              }
            },
            "required": [
              "branch"
            ],
            "type": "OBJECT"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_revert_post",
      "description": "Reverts a commit in a given branch.",
      "path": "/projects/{id}/repository/commits/{sha}/revert",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "Commit SHA to revert",
            "type": "STRING"
          },
          "dry_run": {
            "description": "Does not commit any changes",
            "type": "BOOLEAN"
          },
          "": {
            "properties": {
              "branch": {
                "description": "Target branch name",
                "type": "STRING"
              }
            },
            "required": [
              "branch"
            ],
            "type": "OBJECT"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_diff_get",
      "description": "Get the diff of a commit in a project.",
      "path": "/projects/{id}/repository/commits/{sha}/diff",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit hash or name of a repository branch or tag",
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_comments_get",
      "description": "Get the comments of a commit in a project.",
      "path": "/projects/{id}/repository/commits/{sha}/comments",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit hash or name of a repository branch or tag",
            "type": "STRING"
          },
          "": {
            "properties": {
              "note": {
                "description": "The text of the comment",
                "type": "STRING"
              },
              "path": {
                "description": "The file path relative to the repository",
                "type": "STRING"
              },
              "line": {
                "description": "The line number where the comment should be placed",
                "type": "INTEGER"
              },
              "line_type": {
                "description": "The line type.",
                "enum": [
                  "new",
                  "old"
                ],
                "type": "STRING"
              }
            },
            "required": [
              "note"
            ],
            "type": "OBJECT"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_discussions_get",
      "description": "Get the discussions of a commit in a project.",
      "path": "/projects/{id}/repository/commits/{sha}/discussions",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit hash or name of a repository branch or tag",
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_statuses_get",
      "description": "List the statuses of a commit in a project. The pagination parameters page and per_page can be used to restrict the list of references.",
      "path": "/projects/{id}/repository/commits/{sha}/statuses",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit hash or name of a repository branch or tag",
            "type": "STRING"
          },
          "ref": {
            "description": "The name of a repository branch or tag or, if not given, the default branch",
            "type": "STRING"
          },
          "stage": {
            "description": "Filter by build stage, e.g., test",
            "enum": [
              "build",
              "test",
              "deploy"
            ],
            "type": "STRING"
          },
          "name": {
            "description": "Filter by job name, e.g., bundler:audit",
            "type": "STRING"
          },
          "all": {
            "description": "Return all statuses, not only the latest ones",
            "type": "BOOLEAN"
          },
          "page": {
            "description": "Current page number",
            "type": "INTEGER"
          },
          "per_page": {
            "description": "Number of items per page",
            "type": "INTEGER"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_statuses_sha_post",
      "description": "Adds or updates a build status of a commit.",
      "path": "/projects/{id}/statuses/{sha}",
      "method": "POST",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit SHA",
            "type": "STRING"
          },
          "": {
            "properties": {
              "state": {
                "description": "The state of the status",
                "enum": [
                  "pending",
                  "running",
                  "success",
                  "failed",
                  "canceled"
                ],
                "type": "STRING"
              },
              "ref": {
                "description": "The ref (branch or tag) to which the status refers",
                "type": "STRING"
              },
              "target_url": {
                "description": "The target URL to associate with this status",
                "type": "STRING"
              },
              "description": {
                "description": "A short description of the status",
                "type": "STRING"
              },
              "name": {
                "description": "The label to differentiate this status from the status of other systems",
                "type": "STRING"
              },
              "context": {
                "description": "The label to differentiate this status from the status of other systems",
                "type": "STRING"
              },
              "coverage": {
                "description": "The total code coverage",
                "type": "NUMBER"
              },
              "pipeline_id": {
                "description": "The ID of the pipeline to set status. Use in case of several pipeline on same SHA.",
                "type": "INTEGER"
              }
            },
            "required": [
              "state"
            ],
            "type": "OBJECT"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_merge_requests_get",
      "description": "Get a list of Merge Requests related to the specified commit.",
      "path": "/projects/{id}/repository/commits/{sha}/merge_requests",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit SHA",
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    },
    {
      "name": "projects_id_repository_commits_sha_signature_get",
      "description": "Get the GPG signature from a commit, if it is signed. For unsigned commits, it results in a 404 response.",
      "path": "/projects/{id}/repository/commits/{sha}/signature",
      "method": "GET",
      "tags": [],
      "auth_required": false,
      "auth_type": null,
      "input_schema": {
        "properties": {
          "id": {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "type": "STRING"
          },
          "sha": {
            "description": "The commit SHA",
            "type": "STRING"
          }
        },
        "required": [
          "id",
          "sha"
        ],
        "type": "OBJECT"
      },
      "output_schema": {}
    }
  ],
  "endpoint_count": 15,
  "servers": [
    "http://localhost:30000/api/v4"
  ]
}